#frontend/app.py
import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import streamlit as st
import requests
import json
import csv
import io
import re
import logging
from typing import List
import openpyxl
from openpyxl.styles import Font, Alignment
from backend.field_extractor import extract_fields

# –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BACKEND_URL = "http://127.0.0.1:8000"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
defaults = {
    "conversion_result": None,
    "warnings": None,
    "reference_input": "",
    "scraped_reference": "",
    "scraped_csv": "",
    "converter_result_multi": None,
    "original_fields": {},
    "converted_fields": {}
}
for k, v in defaults.items():
    if k not in st.session_state:
        st.session_state[k] = v

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Cyber-Referent", layout="wide", initial_sidebar_state="collapsed")
st.title("üéì Cyber-Referent")

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.markdown(
    """
    <style>
    .main { background-color: #f5f5f5; padding: 20px; border-radius: 10px; }
    .stButton>button { background-color: #4CAF50; color: white; border-radius: 5px; }
    .stTextArea textarea { border: 2px solid #4CAF50; border-radius: 5px; }
    .stSelectbox { margin-bottom: 15px; }
    .warning { color: #FF9800; font-style: italic; }
    </style>
    """,
    unsafe_allow_html=True
)

# –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
structures_full = {
    "GOST": (
        "–°—Ç–∞—Ç—å—è –≤ –∂—É—Ä–Ω–∞–ª–µ: –§–∞–º–∏–ª–∏—è –ò.–û. –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ // –ñ—É—Ä–Ω–∞–ª. –ì–æ–¥. –¢. X. ‚Ññ Y. –°. Z‚ÄìZ. DOI/URL\n"
        "–ö–Ω–∏–≥–∞: –§–∞–º–∏–ª–∏—è –ò.–û. –ù–∞–∑–≤–∞–Ω–∏–µ. –ú–µ—Å—Ç–æ: –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –ì–æ–¥. –ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π: –ù–∞–∑–≤–∞–Ω–∏–µ / –ø–æ–¥ —Ä–µ–¥. –§–∞–º–∏–ª–∏—è –ò.–û. –ú–µ—Å—Ç–æ: –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –ì–æ–¥. –ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        "–°—Ç–∞—Ç—å—è –≤ –ø–µ—á–∞—Ç–∏: –§–∞–º–∏–ª–∏—è –ò.–û. –ù–∞–∑–≤–∞–Ω–∏–µ // –ñ—É—Ä–Ω–∞–ª. –ì–æ–¥. –¢. X. ‚Ññ Y (–≤ –ø–µ—á–∞—Ç–∏)\n"
        "–û–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—å—è: –§–∞–º–∏–ª–∏—è –ò.–û. –ù–∞–∑–≤–∞–Ω–∏–µ // –ñ—É—Ä–Ω–∞–ª. –ì–æ–¥. URL: ... (–¥–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: –î–î.–ú–ú.–ì–ì–ì–ì)"
    ),
    "APA": (
        "–ñ—É—Ä–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è: –§–∞–º–∏–ª–∏—è, –ò. –û., & –§–∞–º–∏–ª–∏—è, –ò. –û. (–ì–æ–¥). –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏. –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞, —Ç–æ–º(–Ω–æ–º–µ—Ä), —Å—Ç—Ä–∞–Ω–∏—Ü—ã. DOI\n"
        "–û–Ω–ª–∞–π–Ω-–∂—É—Ä–Ω–∞–ª: –§–∞–º–∏–ª–∏—è, –ò. –û., & –§–∞–º–∏–ª–∏—è, –ò. –û. (–ì–æ–¥). –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏. –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞, (–Ω–æ–º–µ—Ä), —Å—Ç—Ä–∞–Ω–∏—Ü—ã. Retrieved from URL\n"
        "–°–µ—Ç–µ–≤–æ–µ –∏–∑–¥–∞–Ω–∏–µ: –§–∞–º–∏–ª–∏—è, –ò. –û. (–ì–æ–¥, Month Day). –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞. Retrieved from URL\n"
        "–ö–Ω–∏–≥–∞: –§–∞–º–∏–ª–∏—è, –ò. –û., & –§–∞–º–∏–ª–∏—è, –ò. –û. (–ì–æ–¥). –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏. –ì–æ—Ä–æ–¥: –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
    ),
    "MLA": (
        '–ñ—É—Ä–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è: –§–∞–º–∏–ª–∏—è, –ò–º—è –∏ –ò–º—è –§–∞–º–∏–ª–∏—è. "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏." –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞, —Ç. X, ‚Ññ Y, –ì–æ–¥, —Å. Z‚ÄìZ. DOI/URL\n'
        '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∂—É—Ä–Ω–∞–ª: –§–∞–º–∏–ª–∏—è, –ò–º—è. "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏." –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞, —Ç. X, –ì–æ–¥, —Å. Z‚ÄìZ. URL\n'
        '–°—Ç–∞—Ç—å—è –≤ –æ–Ω–ª–∞–π–Ω-–°–ú–ò: –§–∞–º–∏–ª–∏—è, –ò–º—è. "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏." –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞, –î–µ–Ω—å –ú–µ—Å—è—Ü –ì–æ–¥, URL\n'
        '–ú–æ–Ω–æ–≥—Ä–∞—Ñ–∏—è: –§–∞–º–∏–ª–∏—è, –ò–º—è. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏. –ú–µ—Å—Ç–æ, –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –ì–æ–¥'
    )
}

target_structures = {
    "APA": {
        "–ñ—É—Ä–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è": "–§–∞–º–∏–ª–∏—è, –ò. –û., & –§–∞–º–∏–ª–∏—è, –ò. –û. (–ì–æ–¥). –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏. –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞, —Ç–æ–º(–Ω–æ–º–µ—Ä), —Å—Ç—Ä–∞–Ω–∏—Ü—ã. DOI",
        "–û–Ω–ª–∞–π–Ω-–∂—É—Ä–Ω–∞–ª": "–§–∞–º–∏–ª–∏—è, –ò. –û. (–ì–æ–¥). –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏. –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞, (–Ω–æ–º–µ—Ä), —Å—Ç—Ä–∞–Ω–∏—Ü—ã. Retrieved from URL",
        "–°–µ—Ç–µ–≤–æ–µ –∏–∑–¥–∞–Ω–∏–µ": "–§–∞–º–∏–ª–∏—è, –ò. –û. (–ì–æ–¥, Month Day). –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞. Retrieved from URL",
        "–ö–Ω–∏–≥–∞": "–§–∞–º–∏–ª–∏—è, –ò. –û. (–ì–æ–¥). –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏. –ì–æ—Ä–æ–¥: –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
    },
    "GOST": {
        "–°—Ç–∞—Ç—å—è –≤ –∂—É—Ä–Ω–∞–ª–µ": "–§–∞–º–∏–ª–∏—è –ò.–û. –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ // –ñ—É—Ä–Ω–∞–ª. –ì–æ–¥. –¢. X. ‚Ññ Y. –°. Z‚ÄìZ. DOI/URL",
        "–ö–Ω–∏–≥–∞": "–§–∞–º–∏–ª–∏—è –ò.–û. –ù–∞–∑–≤–∞–Ω–∏–µ. –ú–µ—Å—Ç–æ: –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –ì–æ–¥. –ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü",
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π": "–ù–∞–∑–≤–∞–Ω–∏–µ / –ø–æ–¥ —Ä–µ–¥. –§–∞–º–∏–ª–∏—è –ò.–û. –ú–µ—Å—Ç–æ: –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –ì–æ–¥. –ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü",
        "–°—Ç–∞—Ç—å—è –≤ –ø–µ—á–∞—Ç–∏": "–§–∞–º–∏–ª–∏—è –ò.–û. –ù–∞–∑–≤–∞–Ω–∏–µ // –ñ—É—Ä–Ω–∞–ª. –ì–æ–¥. –¢. X. ‚Ññ Y (–≤ –ø–µ—á–∞—Ç–∏)",
        "–û–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—å—è": "–§–∞–º–∏–ª–∏—è –ò.–û. –ù–∞–∑–≤–∞–Ω–∏–µ // –ñ—É—Ä–Ω–∞–ª. –ì–æ–¥. URL: ... (–¥–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: –î–î.–ú–ú.–ì–ì–ì–ì)"
    },
    "MLA": {
        "–ñ—É—Ä–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è": '–§–∞–º–∏–ª–∏—è, –ò–º—è –∏ –ò–º—è –§–∞–º–∏–ª–∏—è. "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏." –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞, —Ç. X, ‚Ññ Y, –ì–æ–¥, —Å. Z‚ÄìZ. DOI/URL',
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∂—É—Ä–Ω–∞–ª": '–§–∞–º–∏–ª–∏—è, –ò–º—è. "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏." –ù–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞, —Ç. X, –ì–æ–¥, —Å. Z‚ÄìZ. URL',
        "–°—Ç–∞—Ç—å—è –≤ –æ–Ω–ª–∞–π–Ω-–°–ú–ò": '–§–∞–º–∏–ª–∏—è, –ò–º—è. "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏." –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞, –î–µ–Ω—å –ú–µ—Å—è—Ü –ì–æ–¥, URL',
        "–ú–æ–Ω–æ–≥—Ä–∞—Ñ–∏—è": "–§–∞–º–∏–ª–∏—è, –ò–º—è. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏. –ú–µ—Å—Ç–æ, –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –ì–æ–¥"
    }
}

subformat_opts = {
    "APA": ["–ñ—É—Ä–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è", "–û–Ω–ª–∞–π–Ω-–∂—É—Ä–Ω–∞–ª", "–°–µ—Ç–µ–≤–æ–µ –∏–∑–¥–∞–Ω–∏–µ", "–ö–Ω–∏–≥–∞"],
    "GOST": ["–°—Ç–∞—Ç—å—è –≤ –∂—É—Ä–Ω–∞–ª–µ", "–ö–Ω–∏–≥–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π", "–°—Ç–∞—Ç—å—è –≤ –ø–µ—á–∞—Ç–∏", "–û–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—å—è"],
    "MLA": ["–ñ—É—Ä–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∂—É—Ä–Ω–∞–ª", "–°—Ç–∞—Ç—å—è –≤ –æ–Ω–ª–∞–π–Ω-–°–ú–ò", "–ú–æ–Ω–æ–≥—Ä–∞—Ñ–∏—è"]
}

def create_excel_file(converted_references: List[dict], source_format: str, target_format: str, target_subformat: str) -> bytes:
    """–°–æ–∑–¥–∞–µ—Ç Excel-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫."""
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Conversion Results"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["Original Reference", "Converted Reference", "Source Format", "Target Format", "Target Subformat"]
    for col, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col)
        cell.value = header
        cell.font = Font(bold=True)
        cell.alignment = Alignment(wrap_text=True)

    # –î–∞–Ω–Ω—ã–µ
    for idx, item in enumerate(converted_references, start=2):
        ws.append([
            item["original"],
            item.get("converted", item.get("error", "–û—à–∏–±–∫–∞")),
            source_format,
            target_format,
            target_subformat
        ])

    # –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = min(max_length + 2, 50)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã
        ws.column_dimensions[column].width = adjusted_width

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)
    return output.getvalue()

# –ì–ª–∞–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–∞
mode = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
                ["–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫", "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å—Å—ã–ª–æ–∫", "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Å—ã–ª–∫–µ", "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤ TeX —Ñ–æ—Ä–º–∞—Ç–µ"],
                horizontal=True)

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫
if mode == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫":
    st.header("‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫")

    method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏:", ["üìÑ –§–∞–π–ª PDF/DOCX", "üìù –¢–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã"], key="check_method")

    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    style = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", ["GOST", "APA", "MLA"], key="check_style")
    subformat = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", subformat_opts[style], key="check_subformat")

    st.markdown("**–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**")
    st.code(structures_full[style], language="text")

    if method == "üìÑ –§–∞–π–ª PDF/DOCX":
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", ['pdf', 'docx'], key="file_uploader")
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª", key="check_file"):
            if not uploaded_file:
                st.error("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            else:
                files = {"file": (uploaded_file.name, uploaded_file.getvalue())}
                payload = {"style": style, "subformat": subformat}
                valid_results: List[str] = []
                invalid_results: List[dict] = []

                with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
                    try:
                        resp = requests.post(f"{BACKEND_URL}/check-file/", files=files, data=payload, stream=True, timeout=180)
                        resp.raise_for_status()
                        for raw in resp.iter_lines(decode_unicode=True):
                            if not raw:
                                continue
                            event = json.loads(raw.strip())
                            if event.get("type") == "valid":
                                valid_results.append(event["reference"])
                            elif event.get("type") == "invalid":
                                invalid_results.append(event)
                    except requests.RequestException as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")

                if valid_results:
                    st.markdown("### ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
                    for ref in valid_results:
                        st.success(ref)
                else:
                    st.markdown("### ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
                    st.info("–í–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

                if invalid_results:
                    st.markdown("### ‚ö†Ô∏è –û—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
                    for item in invalid_results:
                        st.error(f"–û—Ä–∏–≥–∏–Ω–∞–ª: {item['original']}")
                        st.info(f"–ê–Ω–∞–ª–∏–∑:\n{item['errors_and_corrections']}")
                        if item.get("corrected_reference") and item["corrected_reference"] != "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫":
                            st.success(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ (Tavily): {item['corrected_reference']}")
                        else:
                            st.warning("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Tavily.")

    elif method == "üìù –¢–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã":
        bibliography_text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã:", height=200, key="bib_text")
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç", key="check_text"):
            if not bibliography_text.strip():
                st.error("–¢–µ–∫—Å—Ç –Ω–µ –≤–≤–µ–¥—ë–Ω.")
            else:
                payload = {"bibliography_text": bibliography_text, "style": style, "subformat": subformat}
                valid_results: List[str] = []
                invalid_results: List[dict] = []

                with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞..."):
                    try:
                        resp = requests.post(f"{BACKEND_URL}/check-text/", data=payload, stream=True, timeout=180)
                        resp.raise_for_status()
                        for raw in resp.iter_lines(decode_unicode=True):
                            if not raw:
                                continue
                            event = json.loads(raw.strip())
                            if event.get("type") == "valid":
                                valid_results.append(event["reference"])
                            elif event.get("type") == "invalid":
                                invalid_results.append(event)
                    except requests.RequestException as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")

                if valid_results:
                    st.markdown("### ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
                    for ref in valid_results:
                        st.success(ref)
                else:
                    st.markdown("### ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
                    st.info("–í–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

                if invalid_results:
                    st.markdown("### ‚ö†Ô∏è –û—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
                    for item in invalid_results:
                        st.error(f"–û—Ä–∏–≥–∏–Ω–∞–ª: {item['original']}")
                        st.info(f"–ê–Ω–∞–ª–∏–∑:\n{item['errors_and_corrections']}")
                        if item.get("corrected_reference") and item["corrected_reference"] != "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫":
                            st.success(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ (Tavily): {item['corrected_reference']}")
                        else:
                            st.warning("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Tavily.")

# 2. –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å—Å—ã–ª–æ–∫
elif mode == "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å—Å—ã–ª–æ–∫":
    st.header("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏")

    method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:", ["üìù –¢–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã", "üìÑ –§–∞–π–ª PDF/DOCX"], key="conv_method")

    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    source_format = st.selectbox("–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:", ["APA", "GOST", "MLA"], key="conv_source")
    st.markdown("**–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:**")
    st.code(structures_full[source_format], language="text")

    target_format = st.selectbox("–¶–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç:", ["APA", "GOST", "MLA"], key="conv_target")
    target_subformat = st.selectbox("–¢–∏–ø –∑–∞–ø–∏—Å–∏:", subformat_opts[target_format], key="conv_subformat")
    st.markdown("**–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:**")
    st.code(target_structures[target_format][target_subformat], language="text")

    if method == "üìù –¢–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã":
        st.subheader("‚úçÔ∏è –í–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã")
        bibliography_text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã (–∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):", height=100, key="conv_text_multi")

        if st.button("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", key="conv_button_multi_text"):
            if not bibliography_text.strip():
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.")
            else:
                payload = {
                    "bibliography_text": bibliography_text,
                    "source_format": source_format,
                    "target_format": target_format,
                    "target_subformat": target_subformat
                }
                with st.spinner("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º..."):
                    try:
                        resp = requests.post(f"{BACKEND_URL}/convert-references-text/", data=payload, timeout=180)
                        resp.raise_for_status()
                        st.session_state.converter_result_multi = resp.json()["converted_references"]
                    except requests.RequestException as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")

    elif method == "üìÑ –§–∞–π–ª PDF/DOCX":
        st.subheader("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", ['pdf', 'docx'], key="conv_file_multi")

        if st.button("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", key="conv_button_multi_file"):
            if not uploaded_file:
                st.error("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            else:
                files = {"file": (uploaded_file.name, uploaded_file.getvalue())}
                payload = {
                    "source_format": source_format,
                    "target_format": target_format,
                    "target_subformat": target_subformat
                }
                with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
                    try:
                        resp = requests.post(f"{BACKEND_URL}/convert-references-file/", files=files, data=payload, timeout=180)
                        resp.raise_for_status()
                        st.session_state.converter_result_multi = resp.json()["converted_references"]
                    except requests.RequestException as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")

    if st.session_state.converter_result_multi:
        st.subheader("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        for item in st.session_state.converter_result_multi:
            st.markdown(f"**–û—Ä–∏–≥–∏–Ω–∞–ª:** {item['original']}")
            if "converted" in item:
                st.markdown(f"**–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:** {item['converted']}")
            else:
                st.error(f"–û—à–∏–±–∫–∞: {item['error']}")

        out = io.StringIO()
        writer = csv.writer(out, lineterminator='\n')
        writer.writerow(["Original Reference", "Converted Reference"])
        for item in st.session_state.converter_result_multi:
            writer.writerow([item["original"], item.get("converted", item.get("error", "–û—à–∏–±–∫–∞"))])
        csv_bytes = ('\ufeff' + out.getvalue()).encode('utf-8')
        st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV", data=csv_bytes, 
                         file_name="converted_references.csv", mime="text/csv", 
                         key="conv_download_csv_multi")

        excel_bytes = create_excel_file(
            st.session_state.converter_result_multi,
            source_format,
            target_format,
            target_subformat
        )
        st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel", data=excel_bytes, 
                         file_name="converted_references.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                         key="conv_download_excel_multi")

# 3. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Å—ã–ª–∫–µ
elif mode == "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Å—ã–ª–∫–µ":
    st.header("ü§ñ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ —Å—Å—ã–ª–∫–µ")

    url_input = st.text_input("URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", placeholder="https://example.com", key="scrape_url")
    style = st.selectbox("–§–æ—Ä–º–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", ["APA", "GOST", "MLA"], key="scrape_style")
    subformat = st.selectbox("–¢–∏–ø –∑–∞–ø–∏—Å–∏:", subformat_opts[style], key="scrape_subformat")
    st.code(target_structures[style][subformat], language="text")

    if st.button("–ü–æ–ª—É—á–∏—Ç—å –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –∑–∞–ø–∏—Å—å", key="scrape_button"):
        if not url_input:
            st.error("–í–≤–µ–¥–∏—Ç–µ URL.")
        elif not re.match(r'^https?://[^\s]+$', url_input):
            st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")
        else:
            payload = {"url": url_input, "style": style, "subformat": subformat}
            with st.spinner("‚è≥ –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ‚Ä¶"):
                try:
                    resp = requests.post(f"{BACKEND_URL}/scrape-reference/", data=payload, timeout=160)
                    resp.raise_for_status()
                    st.session_state.scraped_reference = resp.json().get("reference", "")
                except requests.Timeout:
                    st.error("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
                except requests.RequestException as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")

    if st.session_state.scraped_reference:
        st.success("–ë–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å:")
        st.code(st.session_state.scraped_reference, language="text")

        if st.button("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ CSV", key="csv_button"):
            payload = {"reference": st.session_state.scraped_reference, "target_format": style, "subformat": subformat}
            with st.spinner("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV‚Ä¶"):
                try:
                    resp = requests.post(f"{BACKEND_URL}/convert-reference-csv/", data=payload, timeout=160)
                    resp.raise_for_status()
                    st.session_state.scraped_csv = resp.json()["csv"]
                except requests.RequestException as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")

    if st.session_state.scraped_csv:
        st.markdown("**CSV-–∑–∞–ø–∏—Å—å:**")
        st.code(st.session_state.scraped_csv, language="text")
        csv_bytes = ("\ufeff" + st.session_state.scraped_csv).encode("utf-8")
        st.download_button("üíæ –°–∫–∞—á–∞—Ç—å CSV", data=csv_bytes, file_name="reference.csv", mime="text/csv", key="csv_download")

# 4. –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤ TeX —Ñ–æ—Ä–º–∞—Ç–µ
elif mode == "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤ TeX —Ñ–æ—Ä–º–∞—Ç–µ":
    st.header("üìö –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤ BibTeX")

    method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:", ["üìù –¢–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã", "üìÑ –§–∞–π–ª PDF/DOCX"], key="tex_method")

    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    target_format = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:", ["APA", "GOST", "MLA"], key="tex_target")
    target_subformat = st.selectbox("–¢–∏–ø –∑–∞–ø–∏—Å–∏:", subformat_opts[target_format], key="tex_subformat")
    st.markdown("**–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:**")
    st.code(target_structures[target_format][target_subformat], language="text")

    if method == "üìù –¢–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã":
        st.subheader("‚úçÔ∏è –í–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã")
        bibliography_text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã (–∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):", height=200, key="tex_text_multi")

        if st.button("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ BibTeX", key="tex_button_multi_text"):
            if not bibliography_text.strip():
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.")
            else:
                payload = {
                    "bibliography_text": bibliography_text,
                    "target_format": target_format,
                    "subformat": target_subformat
                }
                with st.spinner("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BibTeX..."):
                    try:
                        resp = requests.post(f"{BACKEND_URL}/convert-references-tex-text/", data=payload, timeout=180)
                        resp.raise_for_status()
                        st.session_state.conversion_result = resp.json()["bibtex"]
                    except requests.RequestException as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")

    elif method == "üìÑ –§–∞–π–ª PDF/DOCX":
        st.subheader("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", ['pdf', 'docx'], key="tex_file_multi")

        if st.button("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ BibTeX", key="tex_button_multi_file"):
            if not uploaded_file:
                st.error("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            else:
                files = {"file": (uploaded_file.name, uploaded_file.getvalue())}
                payload = {
                    "target_format": target_format,
                    "subformat": target_subformat
                }
                with st.spinner("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
                    try:
                        resp = requests.post(f"{BACKEND_URL}/convert-references-tex-file/", files=files, data=payload, timeout=180)
                        resp.raise_for_status()
                        st.session_state.conversion_result = resp.json()["bibtex"]
                    except requests.RequestException as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")

    if st.session_state.conversion_result:
        st.subheader("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        st.code(st.session_state.conversion_result, language="bibtex")
        st.download_button("üíæ –°–∫–∞—á–∞—Ç—å BibTeX", data=st.session_state.conversion_result.encode('utf-8'),
                         file_name=f"references_{target_format.lower()}.bib",
                         mime="text/plain", key="tex_download_multi")

# –ò–∫–æ–Ω–∫–∞ Telegram
telegram_icon_html = """
<div style="position: fixed; bottom: 20px; right: 20px;">
    <a href="https://t.me/cyber_referent_bot" target="_blank" title="–û—Ç–∫—Ä—ã—Ç—å @cyber_referent_bot">
        <img src="https://upload.wikimedia.org/wikipedia/commons/8/82/Telegram_logo.svg" width="50">
    </a>
</div>
"""
st.markdown(telegram_icon_html, unsafe_allow_html=True)