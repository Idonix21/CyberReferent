import streamlit as st
import requests
import json

st.set_page_config(page_title="Cyber-Referent", layout="wide")
st.title("üéì Cyber-Referent")

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –∏–ª–∏ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å—Å—ã–ª–æ–∫
mode = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", ["–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫", "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å—Å—ã–ª–æ–∫"])

if mode == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫":
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ (–∫–∞–∫ —Ä–∞–Ω–µ–µ)
    style = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", ["GOST", "APA", "MLA"])
    method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏:", ["üìÑ –§–∞–π–ª PDF/DOCX", "üìù –¢–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã"])
    
    if method == "üìÑ –§–∞–π–ª PDF/DOCX":
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", ['pdf', 'docx'])
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª"):
            if uploaded_file:
                files = {"file": (uploaded_file.name, uploaded_file.getvalue())}
                data = {"style": style}
                response = requests.post("https://maincyberreferent.onrender.com/check-file/", files=files, data=data, stream=True)
                valid_container = st.empty()
                invalid_container = st.empty()
                valid_results = []
                invalid_results = []
                for line in response.iter_lines(decode_unicode=True):
                    if line:
                        try:
                            data_line = json.loads(line)
                            if data_line["type"] == "valid":
                                valid_results.append(data_line["reference"])
                            elif data_line["type"] == "invalid":
                                invalid_results.append(data_line)
                            with valid_container.container():
                                st.markdown("### ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
                                for ref in valid_results:
                                    st.success(ref)
                            with invalid_container.container():
                                st.markdown("### ‚ö†Ô∏è –û—à–∏–±–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                                for item in invalid_results:
                                    st.error(item["original"])
                                    st.info(item["errors_and_corrections"])
                                    rec = item["recommendation"]
                                    st.info(f"üìó –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∞–Ω–∞–ª–æ–≥: {rec['journal']} (ISSN: {rec['ISSN']})")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    elif method == "üìù –¢–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã":
        bibliography_text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã:")
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç"):
            data = {"bibliography_text": bibliography_text, "style": style}
            response = requests.post("https://maincyberreferent.onrender.com/check-text/", data=data, stream=True)
            valid_container = st.empty()
            invalid_container = st.empty()
            valid_results = []
            invalid_results = []
            for line in response.iter_lines(decode_unicode=True):
                if line:
                    try:
                        data_line = json.loads(line)
                        if data_line["type"] == "valid":
                            valid_results.append(data_line["reference"])
                        elif data_line["type"] == "invalid":
                            invalid_results.append(data_line)
                        with valid_container.container():
                            st.markdown("### ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
                            for ref in valid_results:
                                st.success(ref)
                        with invalid_container.container():
                            st.markdown("### ‚ö†Ô∏è –û—à–∏–±–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                            for item in invalid_results:
                                st.error(item["original"])
                                st.info(item["errors_and_corrections"])
                                rec = item["recommendation"]
                                st.info(f"üìó –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∞–Ω–∞–ª–æ–≥: {rec['journal']} (ISSN: {rec['ISSN']})")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                        
elif mode == "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å—Å—ã–ª–æ–∫":
    st.header("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏")
    reference = st.text_area("–í–≤–µ–¥–∏—Ç–µ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –∑–∞–ø–∏—Å—å:", height=150)
    col1, col2 = st.columns(2)
    with col1:
        source_format = st.selectbox("–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:", ["APA", "GOST", "MLA"])
    with col2:
        target_format = st.selectbox("–¶–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç:", ["APA", "GOST", "MLA"])
    
    if st.button("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
        data = {
            "reference": reference,
            "source_format": source_format,
            "target_format": target_format
        }
        response = requests.post("https://maincyberreferent.onrender.com/convert-reference/", data=data)
        if response.status_code == 200:
            result = response.json()
            st.success("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:")
            st.code(result.get("converted", ""), language="text")
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.text}")

telegram_icon_html = """
<div style="position: fixed; bottom: 20px; right: 20px;">
    <a href="https://t.me/cyber_referent_bot" target="_blank" title="–û—Ç–∫—Ä—ã—Ç—å @cyber_referent_bot">
        <img src="https://upload.wikimedia.org/wikipedia/commons/8/82/Telegram_logo.svg" width="50">
    </a>
</div>
"""
st.markdown(telegram_icon_html, unsafe_allow_html=True)
