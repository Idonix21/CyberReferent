import io
import json
import time
import uvicorn
from fastapi import FastAPI, UploadFile, File, Form
from fastapi.responses import StreamingResponse, JSONResponse
from pydantic import BaseModel, Field, ValidationError, validator
from backend.document_parser import extract_text, extract_bibliography_section, split_references_to_list
from backend.reference_validator import load_vak_list, validate_references
from backend.gost_formatter import format_references  # –¥–ª—è –ì–û–°–¢-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
from backend.apa_formatter import format_apa
from backend.mla_formatter import format_mla
from backend.gost_ai_formatter import format_gost
from backend.apa_ai_formatter import format_apa_ai
from backend.mla_ai_formatter import format_mla_ai
from backend.recommendation_engine import ReferenceRecommender
from backend.text_parser import split_references_from_text

app = FastAPI(
    title="üéì Cyber-Referent API",
    description="–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –ì–û–°–¢, APA, MLA –∏ –í–ê–ö",
    version="1.1"
)

vak_df = load_vak_list('data/VAK_journals.csv')
recommender = ReferenceRecommender(vak_df)

# Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏–∏
class BibliographyInput(BaseModel):
    bibliography_text: str = Field(..., min_length=1)

    @validator("bibliography_text")
    def check_not_empty(cls, v):
        if not v.strip():
            raise ValueError("–¢–µ–∫—Å—Ç –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return v

@app.get("/")
async def root():
    return {"message": "üéì Cyber-Referent API —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"}

@app.post("/check-file/")
async def check_references_from_file(
    file: UploadFile = File(...),
    style: str = Form("GOST")  # –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞: GOST, APA, MLA
):
    if not file.filename.lower().endswith(('pdf', 'docx')):
        return JSONResponse({"error": "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .pdf –∏–ª–∏ .docx"}, status_code=400)
    try:
        file_content = await file.read()
        file_obj = io.BytesIO(file_content)
        file_obj.seek(0)

        text = extract_text(file_obj, file.filename)
        bibliography_section = extract_bibliography_section(text)
        if not bibliography_section:
            return JSONResponse({"error": "–°–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status_code=400)

        references = split_references_to_list(bibliography_section)
        valid_refs, invalid_refs = validate_references(references, vak_df)

        # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é
        style_upper = style.upper()
        if style_upper == "GOST":
            formatted_valid_refs = format_references(valid_refs)
        elif style_upper == "APA":
            formatted_valid_refs = [format_apa(ref) for ref in valid_refs]
        elif style_upper == "MLA":
            formatted_valid_refs = [format_mla(ref) for ref in valid_refs]
        else:
            return JSONResponse({"error": "–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω —Ñ–æ—Ä–º–∞—Ç. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: GOST, APA, MLA."}, status_code=400)

        def stream_response():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ –æ–¥–Ω–æ–π
            for ref in formatted_valid_refs:
                chunk = json.dumps({"type": "valid", "reference": ref}) + "\n"
                yield chunk.encode("utf-8")
                time.sleep(0.5)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            for ref in invalid_refs:
                print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É: {ref}")  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                if style_upper == "GOST":
                    analysis = format_gost(ref)
                elif style_upper == "APA":
                    analysis = format_apa_ai(ref)
                elif style_upper == "MLA":
                    analysis = format_mla_ai(ref)
                recommendations = recommender.recommend_similar(ref, k=1)
                chunk = json.dumps({
                    "type": "invalid",
                    "original": ref,
                    "errors_and_corrections": analysis,
                    "recommendation": {
                        "journal": recommendations[0][0],
                        "ISSN": recommendations[0][1]
                    }
                }) + "\n"
                yield chunk.encode("utf-8")
                time.sleep(0.5)

        return StreamingResponse(
            stream_response(),
            media_type="text/event-stream",
            headers={"Cache-Control": "no-cache"}
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return JSONResponse({"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"}, status_code=500)

@app.post("/check-text/")
async def check_text_references(
    bibliography_text: str = Form(...),
    style: str = Form("GOST")
):
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Pydantic
        bib_input = BibliographyInput(bibliography_text=bibliography_text)
    except ValidationError as e:
        return JSONResponse({"error": e.errors()}, status_code=400)
    try:
        references = split_references_from_text(bib_input.bibliography_text)
        valid_refs, invalid_refs = validate_references(references, vak_df)

        style_upper = style.upper()
        if style_upper == "GOST":
            formatted_valid_refs = format_references(valid_refs)
        elif style_upper == "APA":
            formatted_valid_refs = [format_apa(ref) for ref in valid_refs]
        elif style_upper == "MLA":
            formatted_valid_refs = [format_mla(ref) for ref in valid_refs]
        else:
            return JSONResponse({"error": "–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω —Ñ–æ—Ä–º–∞—Ç. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: GOST, APA, MLA."}, status_code=400)

        def stream_response():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            for ref in formatted_valid_refs:
                chunk = json.dumps({"type": "valid", "reference": ref}) + "\n"
                yield chunk.encode("utf-8")
                time.sleep(0.5)
            # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            for ref in invalid_refs:
                print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É: {ref}")
                if style_upper == "GOST":
                    analysis = format_gost(ref)
                elif style_upper == "APA":
                    analysis = format_apa_ai(ref)
                elif style_upper == "MLA":
                    analysis = format_mla_ai(ref)
                recommendations = recommender.recommend_similar(ref, k=1)
                chunk = json.dumps({
                    "type": "invalid",
                    "original": ref,
                    "errors_and_corrections": analysis,
                    "recommendation": {
                        "journal": recommendations[0][0],
                        "ISSN": recommendations[0][1]
                    }
                }) + "\n"
                yield chunk.encode("utf-8")
                time.sleep(0.5)

        return StreamingResponse(
            stream_response(),
            media_type="text/event-stream",
            headers={"Cache-Control": "no-cache"}
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return JSONResponse({"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"}, status_code=500)

if __name__ == "__main__":
    uvicorn.run("backend.main:app", host="127.0.0.1", port=8000, reload=True)
