import os
import io
import logging
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ backend (—Å–æ–≥–ª–∞—Å–Ω–æ backend/main.py)
from backend.document_parser import extract_text, extract_bibliography_section, split_references_to_list
from backend.reference_validator import validate_references
from backend.gost_ai_formatter import format_gost
from backend.apa_ai_formatter import format_apa_ai
from backend.mla_ai_formatter import format_mla_ai
from backend.text_parser import split_references_from_text
from backend.converter import convert_reference
from backend.web_scraper import extract_bibliographic_data, compose_reference
from backend.tex_bibliography_formatter import format_reference_to_tex
from backend.csv_bibliography_formatter import format_reference_to_csv
from backend.reference_converter import convert_to_format

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
current_processing = {}  # chat_id -> bool
user_settings = {}       # chat_id -> {"mode": ..., "style": ..., "source_format": ..., "target_format": ..., "subformat": ...}
tasks_by_chat = {}       # chat_id -> —Å–ø–∏—Å–æ–∫ asyncio.Task

# –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π (Cyrillic/Latin -> Latin)
style_mapping = {
    "–ì–û–°–¢": "GOST",
    "GOST": "GOST",
    "APA": "APA",
    "MLA": "MLA"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_menu_keyboard():
    keyboard = [
        [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫"), KeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫")],
        [KeyboardButton("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ URL"), KeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CSV")],
        [KeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ BibTeX"), KeyboardButton("–°–ø—Ä–∞–≤–∫–∞")],
        [KeyboardButton("–°—Ç–æ–ø")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_style_keyboard():
    keyboard = [[KeyboardButton("–ì–û–°–¢"), KeyboardButton("APA"), KeyboardButton("MLA")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_subformat_keyboard(style):
    subformats = {
        "APA": ["–ñ—É—Ä–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è", "–û–Ω–ª–∞–π–Ω-–∂—É—Ä–Ω–∞–ª", "–°–µ—Ç–µ–≤–æ–µ –∏–∑–¥–∞–Ω–∏–µ", "–ö–Ω–∏–≥–∞"],
        "GOST": ["–°—Ç–∞—Ç—å—è –≤ –∂—É—Ä–Ω–∞–ª–µ", "–ö–Ω–∏–≥–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π", "–°—Ç–∞—Ç—å—è –≤ –ø–µ—á–∞—Ç–∏", "–û–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—å—è"],
        "MLA": ["–ñ—É—Ä–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∂—É—Ä–Ω–∞–ª", "–°—Ç–∞—Ç—å—è –≤ –æ–Ω–ª–∞–π–Ω-–°–ú–ò", "–ú–æ–Ω–æ–≥—Ä–∞—Ñ–∏—è"]
    }
    keyboard = [[KeyboardButton(sub)] for sub in subformats[style]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_processing[chat_id] = True
    user_settings[chat_id] = {"mode": "select_function"}
    tasks_by_chat[chat_id] = []
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
    welcome_message = (
        f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Cyber-Referent.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "- –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Å—ã–ª–∫–∏ –ø–æ –ì–û–°–¢, APA, MLA\n"
        "- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏\n"
        "- –°–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å URL\n"
        "- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV –∏ BibTeX\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:"
    )
    await update.message.reply_text(welcome_message, reply_markup=get_main_menu_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
    help_message = (
        f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
        "–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
        "- *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫*: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF/DOCX) –∏–ª–∏ —Ç–µ–∫—Å—Ç\n"
        "- *–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫*: —É–∫–∞–∂–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É\n"
        "- *–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ URL*: —É–∫–∞–∂–∏—Ç–µ URL –∏ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n"
        "- *–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CSV*: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV\n"
        "- *–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ BibTeX*: —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/stop ‚Äì –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/help ‚Äì —Å–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(help_message, reply_markup=get_main_menu_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_processing[chat_id] = False
    if chat_id in tasks_by_chat:
        for task in tasks_by_chat[chat_id]:
            task.cancel()
        tasks_by_chat[chat_id].clear()
    user_settings[chat_id] = {"mode": "select_function"}
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
    stop_message = (
        f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
    )
    await update.message.reply_text(stop_message, reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
async def process_check_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    style = user_settings[chat_id]["style"]
    subformat = user_settings[chat_id]["subformat"]
    compiled_citations = []

    try:
        document = update.message.document
        filename = document.file_name.lower()
        if not (filename.endswith('.pdf') or filename.endswith('.docx')):
            await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã PDF –∏ DOCX.", reply_markup=get_main_menu_keyboard())
            return
        logger.info("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: %s", filename)
        file = await document.get_file()
        file_bytes = await file.download_as_bytearray()
        file_obj = io.BytesIO(file_bytes)
        text = await asyncio.to_thread(extract_text, file_obj, filename)
        bibliography_section = extract_bibliography_section(text)
        if not bibliography_section:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu_keyboard())
            return
        references = split_references_to_list(bibliography_section)
        valid_refs, invalid_refs = validate_references(references, style, subformat)
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

        for ref_tuple in valid_refs:
            if not current_processing.get(chat_id, False):
                break
            ref_text = ref_tuple[0]
            message_text = (
                f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
                f"‚úÖ –í–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n```\n{ref_text}\n```"
            )
            await update.message.reply_text(message_text, reply_markup=get_main_menu_keyboard())
            compiled_citations.append(ref_text)

        for ref in invalid_refs:
            if not current_processing.get(chat_id, False):
                break
            analysis = (
                format_gost(ref['original'], subformat) if style == "GOST" else
                format_apa_ai(ref['original'], subformat) if style == "APA" else
                format_mla_ai(ref['original'], subformat)
            )
            message_text = (
                f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
                f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
                f"–û—Ä–∏–≥–∏–Ω–∞–ª: {ref['original']}\n\n"
                f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n```\n{analysis}\n```"
            )
            await update.message.reply_text(message_text, reply_markup=get_main_menu_keyboard())
            compiled_citations.append(analysis.split('\n')[-1] if style != "GOST" else analysis.split("–ì–û–°–¢:")[-1].strip())

        if compiled_citations:
            numbered_citations = "\n\n".join(f"{i+1}. {cit}" for i, cit in enumerate(compiled_citations))
            compiled_message = (
                f"üìù –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
                f"```\n{numbered_citations}\n```"
            )
            await update.message.reply_text(compiled_message, reply_markup=get_main_menu_keyboard())

        await update.message.reply_text("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_menu_keyboard())
        user_settings[chat_id]["mode"] = "select_function"

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
async def process_check_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    style = user_settings[chat_id]["style"]
    subformat = user_settings[chat_id]["subformat"]
    text = update.message.text.strip()
    compiled_citations = []

    try:
        references = split_references_from_text(text)
        valid_refs, invalid_refs = validate_references(references, style, subformat)
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

        for ref_tuple in valid_refs:
            if not current_processing.get(chat_id, False):
                break
            ref_text = ref_tuple[0]
            message_text = (
                f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
                f"‚úÖ –í–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n```\n{ref_text}\n```"
            )
            await update.message.reply_text(message_text, reply_markup=get_main_menu_keyboard())
            compiled_citations.append(ref_text)

        for ref in invalid_refs:
            if not current_processing.get(chat_id, False):
                break
            analysis = (
                format_gost(ref['original'], subformat) if style == "GOST" else
                format_apa_ai(ref['original'], subformat) if style == "APA" else
                format_mla_ai(ref['original'], subformat)
            )
            message_text = (
                f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
                f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
                f"–û—Ä–∏–≥–∏–Ω–∞–ª: {ref['original']}\n\n"
                f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n```\n{analysis}\n```"
            )
            await update.message.reply_text(message_text, reply_markup=get_main_menu_keyboard())
            compiled_citations.append(analysis.split('\n')[-1] if style != "GOST" else analysis.split("–ì–û–°–¢:")[-1].strip())

        if compiled_citations:
            numbered_citations = "\n\n".join(f"{i+1}. {cit}" for i, cit in enumerate(compiled_citations))
            compiled_message = (
                f"üìù –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
                f"```\n{numbered_citations}\n```"
            )
            await update.message.reply_text(compiled_message, reply_markup=get_main_menu_keyboard())

        await update.message.reply_text("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_menu_keyboard())
        user_settings[chat_id]["mode"] = "select_function"

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
async def process_convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    reference = update.message.text.strip()
    source_format = user_settings[chat_id]["source_format"]
    target_format = user_settings[chat_id]["target_format"]
    subformat = user_settings[chat_id]["subformat"]
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

    try:
        converted = convert_to_format(reference, target_format, subformat)
        message_text = (
            f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
            f"–û—Ä–∏–≥–∏–Ω–∞–ª: {reference}\n"
            f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ({target_format} - {subformat}):\n```\n{converted}\n```"
        )
        await update.message.reply_text(message_text, reply_markup=get_main_menu_keyboard())
        user_settings[chat_id]["mode"] = "select_function"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ URL
async def process_scrape(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    url = update.message.text.strip()
    style = user_settings[chat_id]["style"]
    subformat = user_settings[chat_id]["subformat"]
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

    try:
        data = await extract_bibliographic_data(url)
        reference = compose_reference(data, style, subformat)
        message_text = (
            f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
            f"–°–æ–±—Ä–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ ({style} - {subformat}):\n```\n{reference}\n```"
        )
        await update.message.reply_text(message_text, reply_markup=get_main_menu_keyboard())
        user_settings[chat_id]["mode"] = "select_function"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ CSV
async def process_to_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    reference = update.message.text.strip()
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

    try:
        csv_str = format_reference_to_csv(reference)
        message_text = (
            f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
            f"CSV:\n```\n{csv_str}\n```"
        )
        await update.message.reply_text(message_text, reply_markup=get_main_menu_keyboard())
        csv_file = io.BytesIO(csv_str.encode('utf-8'))
        await update.message.reply_document(document=InputFile(csv_file, filename="reference.csv"),
                                            caption="–°–∫–∞—á–∞–π—Ç–µ CSV-—Ñ–∞–π–ª")
        user_settings[chat_id]["mode"] = "select_function"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ CSV:")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ BibTeX
async def process_to_bibtex(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    reference = update.message.text.strip()
    target_format = user_settings[chat_id]["target_format"]
    subformat = user_settings[chat_id]["subformat"]
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")

    try:
        bibtex = format_reference_to_tex(reference, target_format, subformat)
        message_text = (
            f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
            f"BibTeX ({target_format} - {subformat}):\n```\n{bibtex}\n```"
        )
        await update.message.reply_text(message_text, reply_markup=get_main_menu_keyboard())
        bib_file = io.BytesIO(bibtex.encode('utf-8'))
        await update.message.reply_document(document=InputFile(bib_file, filename="reference.bib"),
                                            caption="–°–∫–∞—á–∞–π—Ç–µ BibTeX-—Ñ–∞–π–ª")
        user_settings[chat_id]["mode"] = "select_function"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ BibTeX:")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    mode = user_settings.get(chat_id, {"mode": "select_function"})["mode"]
    text = update.message.text.strip()

    if mode == "select_function":
        if text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫":
            user_settings[chat_id]["mode"] = "check_style"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å: –ì–û–°–¢, APA, MLA", reply_markup=get_style_keyboard())
        elif text == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫":
            user_settings[chat_id]["mode"] = "convert_source"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: APA, GOST, MLA", reply_markup=get_style_keyboard())
        elif text == "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ URL":
            user_settings[chat_id]["mode"] = "scrape_style"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å: –ì–û–°–¢, APA, MLA", reply_markup=get_style_keyboard())
        elif text == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CSV":
            user_settings[chat_id]["mode"] = "convert_to_csv_input"
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ CSV.")
        elif text == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ BibTeX":
            user_settings[chat_id]["mode"] = "bibtex_target"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å: –ì–û–°–¢, APA, MLA", reply_markup=get_style_keyboard())
        elif text == "–°–ø—Ä–∞–≤–∫–∞":
            await help_command(update, context)
        elif text == "–°—Ç–æ–ø":
            await stop(update, context)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=get_main_menu_keyboard())

    elif mode == "check_style":
        normalized_text = text.upper()
        if normalized_text in style_mapping:
            user_settings[chat_id]["style"] = style_mapping[normalized_text]
            user_settings[chat_id]["mode"] = "check_subformat"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=get_subformat_keyboard(user_settings[chat_id]["style"]))
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å: –ì–û–°–¢, APA, MLA", reply_markup=get_style_keyboard())

    elif mode == "check_subformat":
        style = user_settings[chat_id]["style"]
        if text in [btn[0].text for btn in get_subformat_keyboard(style).keyboard]:
            user_settings[chat_id]["subformat"] = text
            user_settings[chat_id]["mode"] = "check_input"
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF/DOCX) –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=get_subformat_keyboard(style))

    elif mode == "check_input":
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
        task = asyncio.create_task(process_check_text(update, context))
        tasks_by_chat[chat_id].append(task)

    elif mode == "convert_source":
        normalized_text = text.upper()
        if normalized_text in style_mapping:
            user_settings[chat_id]["source_format"] = style_mapping[normalized_text]
            user_settings[chat_id]["mode"] = "convert_target"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç: APA, GOST, MLA", reply_markup=get_style_keyboard())
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: APA, GOST, MLA", reply_markup=get_style_keyboard())

    elif mode == "convert_target":
        normalized_text = text.upper()
        if normalized_text in style_mapping:
            user_settings[chat_id]["target_format"] = style_mapping[normalized_text]
            user_settings[chat_id]["mode"] = "convert_subformat"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=get_subformat_keyboard(user_settings[chat_id]["target_format"]))
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç: APA, GOST, MLA", reply_markup=get_style_keyboard())

    elif mode == "convert_subformat":
        target_format = user_settings[chat_id]["target_format"]
        if text in [btn[0].text for btn in get_subformat_keyboard(target_format).keyboard]:
            user_settings[chat_id]["subformat"] = text
            user_settings[chat_id]["mode"] = "convert_input"
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=get_subformat_keyboard(target_format))

    elif mode == "convert_input":
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
        task = asyncio.create_task(process_convert(update, context))
        tasks_by_chat[chat_id].append(task)

    elif mode == "scrape_style":
        normalized_text = text.upper()
        if normalized_text in style_mapping:
            user_settings[chat_id]["style"] = style_mapping[normalized_text]
            user_settings[chat_id]["mode"] = "scrape_subformat"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=get_subformat_keyboard(user_settings[chat_id]["style"]))
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å: –ì–û–°–¢, APA, MLA", reply_markup=get_style_keyboard())

    elif mode == "scrape_subformat":
        style = user_settings[chat_id]["style"]
        if text in [btn[0].text for btn in get_subformat_keyboard(style).keyboard]:
            user_settings[chat_id]["subformat"] = text
            user_settings[chat_id]["mode"] = "scrape_input"
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=get_subformat_keyboard(style))

    elif mode == "scrape_input":
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
        task = asyncio.create_task(process_scrape(update, context))
        tasks_by_chat[chat_id].append(task)

    elif mode == "convert_to_csv_input":
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
        task = asyncio.create_task(process_to_csv(update, context))
        tasks_by_chat[chat_id].append(task)

    elif mode == "bibtex_target":
        normalized_text = text.upper()
        if normalized_text in style_mapping:
            user_settings[chat_id]["target_format"] = style_mapping[normalized_text]
            user_settings[chat_id]["mode"] = "bibtex_subformat"
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=get_subformat_keyboard(user_settings[chat_id]["target_format"]))
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å: –ì–û–°–¢, APA, MLA", reply_markup=get_style_keyboard())

    elif mode == "bibtex_subformat":
        target_format = user_settings[chat_id]["target_format"]
        if text in [btn[0].text for btn in get_subformat_keyboard(target_format).keyboard]:
            user_settings[chat_id]["subformat"] = text
            user_settings[chat_id]["mode"] = "bibtex_input"
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ BibTeX.")
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=get_subformat_keyboard(target_format))

    elif mode == "bibtex_input":
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
        task = asyncio.create_task(process_to_bibtex(update, context))
        tasks_by_chat[chat_id].append(task)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
async def handle_file_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    mode = user_settings.get(chat_id, {"mode": "select_function"})["mode"]
    if mode == "check_input":
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
        task = asyncio.create_task(process_check_file(update, context))
        tasks_by_chat[chat_id].append(task)
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫'.", reply_markup=get_main_menu_keyboard())