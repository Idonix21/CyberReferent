import os
import io
import logging
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ main)
load_dotenv()

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –∏–∑ backend
from backend.document_parser import extract_text, extract_bibliography_section, split_references_to_list
from backend.reference_validator import load_vak_list, validate_references
from backend.gost_formatter import format_references
from backend.gost_ai_formatter import format_gost
from backend.apa_formatter import format_apa
from backend.apa_ai_formatter import format_apa_ai
from backend.mla_formatter import format_mla
from backend.mla_ai_formatter import format_mla_ai
from backend.recommendation_engine import ReferenceRecommender
from backend.text_parser import split_references_from_text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
current_processing = {}  # chat_id -> bool
user_style = {}          # chat_id -> –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ("–ì–û–°–¢", "APA", "MLA")
tasks_by_chat = {}       # chat_id -> —Å–ø–∏—Å–æ–∫ asyncio.Task

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –í–ê–ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
vak_df = load_vak_list('data/VAK_journals.csv')
recommender = ReferenceRecommender(vak_df)

def get_main_keyboard():
    keyboard = [[KeyboardButton("–°—Ç–∞—Ä—Ç"), KeyboardButton("–°—Ç–æ–ø")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_style_keyboard():
    keyboard = [[KeyboardButton("–ì–û–°–¢"), KeyboardButton("APA"), KeyboardButton("MLA")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def extract_gost_citation(text: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ç—É —á–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∏–¥—Ç–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ì–û–°–¢.
    –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:", —Ç–æ –æ–Ω –æ—Ç—Å–µ–∫–∞–µ—Ç—Å—è.
    –ï—Å–ª–∏ –º–µ—Ç–∫–∞ "–ì–û–°–¢:" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–µ—Å—å —Ç–µ–∫—Å—Ç.
    """
    if "–ì–û–°–¢:" in text:
        citation = text.split("–ì–û–°–¢:")[-1].strip()
        if "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:" in citation:
            citation = citation.split("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:")[0].strip()
        return citation
    return text.strip()

def extract_formatted_citation(formatted_text: str, style: str) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é (APA –∏–ª–∏ MLA).
    –ò—â–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ –º–∞—Ä–∫–µ—Ä –≤–∏–¥–∞ "APA:" –∏–ª–∏ "MLA:", –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –Ω–µ–≥–æ.
    –û—Ç—Å–µ–∫–∞–µ—Ç –±–ª–æ–∫ "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:", –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    """
    marker = f"{style}:"
    if marker in formatted_text:
        citation = formatted_text.split(marker, 1)[-1].strip()
        if "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:" in citation:
            citation = citation.split("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:")[0].strip()
        return citation
    return formatted_text.strip()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
    welcome_message = (
        f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç üë©üèª‚ÄçüíªCyber-Referent.\n\n"
        "–Ø –ø—Ä–æ–≤–µ—Ä—è—é –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ì–û–°–¢, APA –∏ MLA.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∏–∂–µ:"
    )
    chat_id = update.effective_chat.id
    current_processing[chat_id] = True
    tasks_by_chat[chat_id] = []
    await update.message.reply_text(welcome_message, reply_markup=get_style_keyboard())

async def set_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    chosen = update.message.text.strip().upper()
    if chosen not in ["–ì–û–°–¢", "APA", "MLA"]:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: –ì–û–°–¢, APA –∏–ª–∏ MLA.",
            reply_markup=get_style_keyboard()
        )
        return
    user_style[chat_id] = chosen
    try:
        await update.message.delete()
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
    message = (
        f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç: {chosen}.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )
    await context.bot.send_message(chat_id=chat_id, text=message, reply_markup=get_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
    help_message = (
        f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
        "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª PDF/DOCX –∏–ª–∏ —Ç–µ–∫—Å—Ç –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (–ì–û–°–¢, APA, MLA) —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/stop ‚Äì –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/help ‚Äì —Å–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(help_message, reply_markup=get_main_keyboard())

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_processing[chat_id] = False
    if chat_id in tasks_by_chat:
        for task in tasks_by_chat[chat_id]:
            task.cancel()
        tasks_by_chat[chat_id].clear()
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
    stop_message = f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ñ–¥—É –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    await update.message.reply_text(stop_message, reply_markup=get_main_keyboard())

async def process_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    compiled_citations = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    try:
        document = update.message.document
        if document:
            filename = document.file_name.lower()
            if not (filename.endswith('.pdf') or filename.endswith('.docx')):
                await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã PDF –∏ DOCX.", reply_markup=get_main_keyboard())
                return
            logger.info("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: %s", filename)
            file = await document.get_file()
            file_bytes = await file.download_as_bytearray()
            file_obj = io.BytesIO(file_bytes)
            text = await asyncio.to_thread(extract_text, file_obj, filename)
            bibliography_section = await asyncio.to_thread(extract_bibliography_section, text)
            if not bibliography_section:
                await update.message.reply_text("–°–µ–∫—Ü–∏—è '–°–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.", reply_markup=get_main_keyboard())
                return
            references = await asyncio.to_thread(split_references_to_list, bibliography_section)
            valid_refs, invalid_refs = await asyncio.to_thread(validate_references, references, vak_df)
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
            style_chosen = user_style.get(chat_id, "–ì–û–°–¢")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            for ref_tuple in valid_refs:
                if not current_processing.get(chat_id, False):
                    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    break
                ref = ref_tuple[0]
                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É: %s", ref)
                if style_chosen == "–ì–û–°–¢":
                    formatted_refs = await asyncio.to_thread(format_references, [ref_tuple])
                    formatted_ref = formatted_refs[0]
                    citation = extract_gost_citation(formatted_ref)
                elif style_chosen == "APA":
                    formatted_ref = await asyncio.to_thread(format_apa, ref)
                    citation = extract_formatted_citation(formatted_ref, "APA")
                elif style_chosen == "MLA":
                    formatted_ref = await asyncio.to_thread(format_mla, ref)
                    citation = extract_formatted_citation(formatted_ref, "MLA")

                message_text = (
                    f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
                    f"‚úÖ *–í–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n\n"
                    f"{style_chosen}:\n```\n{citation}\n```"
                )
                await update.message.reply_text(message_text, parse_mode="Markdown", reply_markup=get_main_keyboard())
                compiled_citations.append(citation)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            for ref in invalid_refs:
                if not current_processing.get(chat_id, False):
                    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    break
                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É: %s", ref)
                if style_chosen == "–ì–û–°–¢":
                    analysis = await asyncio.to_thread(format_gost, ref)
                    citation = extract_gost_citation(analysis)
                elif style_chosen == "APA":
                    analysis = await asyncio.to_thread(format_apa_ai, ref)
                    citation = extract_formatted_citation(analysis, "APA")
                elif style_chosen == "MLA":
                    analysis = await asyncio.to_thread(format_mla_ai, ref)
                    citation = extract_formatted_citation(analysis, "MLA")

                recommendations = await asyncio.to_thread(recommender.recommend_similar, ref, 1)
                rec_journal = recommendations[0][0] if recommendations else "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
                rec_issn = recommendations[0][1] if recommendations else ""

                message_text = (
                    f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
                    f"‚ö†Ô∏è *–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n\n"
                    f"*–ò—Å—Ö–æ–¥–Ω–∞—è:* {ref}\n\n"
                    f"*–û—à–∏–±–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:*\n{analysis}\n\n"
                    f"*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∂—É—Ä–Ω–∞–ª:* {rec_journal} (ISSN: {rec_issn})\n\n"
                    f"{style_chosen}:\n```\n{citation}\n```"
                )
                await update.message.reply_text(message_text, parse_mode="Markdown", reply_markup=get_main_keyboard())
                compiled_citations.append(citation)

            # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
            if compiled_citations:
                numbered_citations = "\n\n".join(f"{i+1}. {citation}" for i, citation in enumerate(compiled_citations))
                compiled_message = (
                    f"üìù *–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:*\n"
                    f"```\n{numbered_citations}\n```"
                )
                await update.message.reply_text(compiled_message, parse_mode="Markdown", reply_markup=get_main_keyboard())

            final_message = (
                "üéâ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n"
                "–í—Å—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å Cyber-Referent. "
                "–ù–∞–¥–µ—é—Å—å, –Ω–∞—à–∞ –ø–æ–º–æ—â—å –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–æ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π!"
            )
            await update.message.reply_text(final_message, parse_mode="Markdown", reply_markup=get_main_keyboard())

    except asyncio.CancelledError:
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=get_main_keyboard())

async def process_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    compiled_citations = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    try:
        text = update.message.text.strip()
        references = await asyncio.to_thread(split_references_from_text, text)
        valid_refs, invalid_refs = await asyncio.to_thread(validate_references, references, vak_df)
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        style_chosen = user_style.get(chat_id, "–ì–û–°–¢")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        for ref_tuple in valid_refs:
            if not current_processing.get(chat_id, False):
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break
            ref = ref_tuple[0]
            logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É: %s", ref)
            if style_chosen == "–ì–û–°–¢":
                formatted_refs = await asyncio.to_thread(format_references, [ref_tuple])
                formatted_ref = formatted_refs[0]
                citation = extract_gost_citation(formatted_ref)
            elif style_chosen == "APA":
                formatted_ref = await asyncio.to_thread(format_apa, ref)
                citation = extract_formatted_citation(formatted_ref, "APA")
            elif style_chosen == "MLA":
                formatted_ref = await asyncio.to_thread(format_mla, ref)
                citation = extract_formatted_citation(formatted_ref, "MLA")

            message_text = (
                f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
                f"‚úÖ *–í–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n\n"
                f"{style_chosen}:\n```\n{citation}\n```"
            )
            await update.message.reply_text(message_text, parse_mode="Markdown", reply_markup=get_main_keyboard())
            compiled_citations.append(citation)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        for ref in invalid_refs:
            if not current_processing.get(chat_id, False):
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break
            logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É: %s", ref)
            if style_chosen == "–ì–û–°–¢":
                analysis = await asyncio.to_thread(format_gost, ref)
                citation = extract_gost_citation(analysis)
            elif style_chosen == "APA":
                analysis = await asyncio.to_thread(format_apa_ai, ref)
                citation = extract_formatted_citation(analysis, "APA")
            elif style_chosen == "MLA":
                analysis = await asyncio.to_thread(format_mla_ai, ref)
                citation = extract_formatted_citation(analysis, "MLA")

            recommendations = await asyncio.to_thread(recommender.recommend_similar, ref, 1)
            rec_journal = recommendations[0][0] if recommendations else "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            rec_issn = recommendations[0][1] if recommendations else ""

            message_text = (
                f"üë©üèª‚ÄçüíªCyber-Referent, [{current_time}]\n"
                f"‚ö†Ô∏è *–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n\n"
                f"*–ò—Å—Ö–æ–¥–Ω–∞—è:* {ref}\n\n"
                f"*–û—à–∏–±–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:*\n{analysis}\n\n"
                f"*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∂—É—Ä–Ω–∞–ª:* {rec_journal} (ISSN: {rec_issn})\n\n"
                f"{style_chosen}:\n```\n{citation}\n```"
            )
            await update.message.reply_text(message_text, parse_mode="Markdown", reply_markup=get_main_keyboard())
            compiled_citations.append(citation)

        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        if compiled_citations:
            numbered_citations = "\n\n".join(f"{i+1}. {citation}" for i, citation in enumerate(compiled_citations))
            compiled_message = (
                f"üìù *–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:*\n"
                f"```\n{numbered_citations}\n```"
            )
            await update.message.reply_text(compiled_message, parse_mode="Markdown", reply_markup=get_main_keyboard())

        final_message = (
            "üéâ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n"
            "–í—Å—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å Cyber-Referent. "
            "–ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—Ö–æ–≤ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤!"
        )
        await update.message.reply_text(final_message, parse_mode="Markdown", reply_markup=get_main_keyboard())

    except asyncio.CancelledError:
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}", reply_markup=get_main_keyboard())

async def handle_file_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...", reply_markup=get_main_keyboard())
    task = asyncio.create_task(process_file(update, context))
    tasks_by_chat.setdefault(update.effective_chat.id, []).append(task)

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "—Å—Ç–∞—Ä—Ç":
        await start(update, context)
    elif text.lower() == "—Å—Ç–æ–ø":
        await stop(update, context)
    elif text.upper() in ["–ì–û–°–¢", "APA", "MLA"]:
        await set_style(update, context)
    else:
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å...", reply_markup=get_main_keyboard())
        task = asyncio.create_task(process_text(update, context))
        tasks_by_chat.setdefault(update.effective_chat.id, []).append(task)
